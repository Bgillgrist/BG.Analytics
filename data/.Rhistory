ggplot(pitcher_data %>% filter(TaggedPitchType == pitch_type), aes(x = PlateLocSide, y = PlateLocHeight)) +
geom_density2d_filled(aes(fill = ..level..), contour_var = "density") +
scale_fill_viridis_d(option = "C") +  # Use a discrete color scale
geom_rect(aes(xmin = -0.708333, xmax = 0.708333, ymin = 1.55, ymax = 3.78), color = "black", fill = NA, linetype = "solid", size = 1.2) +
coord_fixed(ratio = 1) +  # Set a 1:1 aspect ratio
coord_cartesian(xlim = c(-2, 2), ylim = c(0, 5)) +  # Ensure the strike zone is centered
theme_minimal() +
labs(title = paste(pitch_type, "Heatmap"), x = "Plate Location Side", y = "Plate Location Height") +
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5)
)
})
})
})
# Dynamically generate UI for hitter selection
output$hitter <- renderUI({
req(data())
hitters <- unique(data()$Batter)
selectInput("hitter", "Choose Hitter", choices = hitters)
})
# Generate hitter report when the button is clicked
observeEvent(input$generate_hitter_report, {
req(input$hitter)
# Filter data for the selected hitter
hitter_data <- hitter_data %>%
group_by(Batter, Date) %>%
mutate(
PlateAppearanceID = cumsum(
PlayResult %in% c("Single", "Double", "Triple", "HomeRun", "HitByPitch") |
KorBB %in% c("Walk", "Strikeout") |
row_number() == 1
)
) %>%
ungroup()
# Calculate overall stats
overall_stats <- hitter_data %>%
group_by(PlateAppearanceID, Batter, Date) %>%
summarise(
Runs = any(PlayResult == "Run"),
RBIs = sum(RBI, na.rm = TRUE)
) %>%
group_by(Batter) %>%
summarise(
GamesPlayed = n_distinct(Date),
PA = n(),
R = sum(Runs),
RBI = sum(RBIs)
)
# Calculate advanced stats
advanced_stats <- hitter_data %>%
group_by(PlateAppearanceID, Batter) %>%
summarise(
Walks = any(KorBB == "Walk"),
Strikeouts = any(KorBB == "Strikeout"),
Hits = any(PlayResult %in% c("Single", "Double", "Triple", "HomeRun")),
Singles = any(PlayResult == "Single"),
Doubles = any(PlayResult == "Double"),
Triples = any(PlayResult == "Triple"),
HomeRuns = any(PlayResult == "HomeRun"),
ExitVelocity = mean(ExitVelocity, na.rm = TRUE),
SwingsAtBalls = sum((KorBB == "Ball") & (Swing == 1)),
Balls = sum(KorBB == "Ball")
) %>%
summarise(
WalkRate = mean(Walks) * 100,
StrikeoutRate = mean(Strikeouts) * 100,
AVG = mean(Hits),
OBP = (sum(Hits) + sum(Walks) + sum(hitter_data$PlayResult == "HitByPitch")) / n(),
SLG = (sum(Singles) + 2 * sum(Doubles) + 3 * sum(Triples) + 4 * sum(HomeRuns)) / n(),
BABIP = sum(Hits) / sum(hitter_data$BattedBallType %in% c("GroundBall", "LineDrive", "FlyBall")),
AvgExitVelocity = mean(ExitVelocity, na.rm = TRUE),
ChaseRate = (sum(SwingsAtBalls) / sum(Balls)) * 100
)
output$hitter_overall_stats <- renderTable(overall_stats)
output$hitter_advanced_stats <- renderTable(advanced_stats)
# Generate spray chart
output$spray_chart <- renderPlot({
ggplot(hitter_data, aes(x = Bearing, y = Distance, color = TaggedHitType)) +
geom_segment(aes(xend = Bearing, yend = Distance), arrow = arrow(type = "closed")) +
scale_color_manual(values = c("Groundball" = "dashed", "LineDrive" = "solid")) +
theme_minimal() +
coord_polar(theta = "x") +
labs(title = "Spray Chart", x = "Bearing", y = "Distance", color = "Hit Type") +
theme(
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(hjust = 0.5),
axis.title.y = element_text(hjust = 0.5)
)
})
})
}
source("~/Baseball.ANOVA.R")
output$hitter_overall_stats <- renderTable(overall_stats)
source("~/Baseball.ANOVA.R", echo=TRUE)
runApp('Baseball.ANOVA.R')
library(shiny); runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
library(shiny); runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
library(shiny); runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
head(inplay_data)
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
library(shiny); runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
library(shiny); runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
lifecycle::last_lifecycle_warnings()
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
install.packages("DT")
library(shiny); runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
library(shiny); runApp('Baseball.ANOVA.R')
library(shiny); runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
runApp('Baseball.ANOVA.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='bgillgrist',
token='E2F3A224E14A39D7FA636DFA7531AA8B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bgillgrist',
token='E2F3A224E14A39D7FA636DFA7531AA8B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bgillgrist',
token='E2F3A224E14A39D7FA636DFA7531AA8B',
secret='1BarLiNhRW/0OboxTrYdYwmjKfxCnxxJS7wh5k9P')
library(rsconnect)
rsconnect::deployApp('brennangillgrist/Baseball.TrackMan.Analysis.R')
.rs.files.restoreBindings()
setwd("~/")
setwd("/Users/brennangillgrist")
library(rsconnect)
rlang::last_trace()
library(rsconnect)
library(shiny); runApp('Baseball.TrackMan.Analysis.R')
runApp('Baseball.TrackMan.Analysis.R')
runApp('Baseball.TrackMan.Analysis.R')
runApp('Baseball.TrackMan.Analysis.R')
runApp('Baseball.TrackMan.Analysis.R')
library(shiny); runApp('Baseball.TrackMan.Analysis.R')
runApp('Baseball.TrackMan.Analysis.R')
library(shiny); runApp('Baseball.TrackMan.Analysis.R')
x<- matrix(seq(1,99,2), ncol=10, nrow=5, byrow=FALSE)
x
sum(x[3, %2=0])
sum(x[3, seq(2,10,2)])
x<-c(1,2,3,4)
y<-c(2,4,5,6)
plot(lm(y~x))
URL<-read.html("https://cse.sc.edu/~bhipp/587/WavesBasicR.RData")
library("alr3")
install.packages("alr3")
load("/Users/brennangillgrist/Downloads/WavesBasicR.RData")
class(data)
summary(data)
head(data)
plot(data$x, data$y)
sum(data$y > data$wave_height)
dim(data)
sum(data$wave_height > mean(data$wave_height))
library(ggplot2)
ggplot(data=data, aes(data$wave_height)) +
geom_histogram() + labs(title="Distribution of Wave Heights", )
ggplot(data=data, aes(data$wave_height)) +
geom_histogram() + labs(title="Distribution of Wave Heights",
x = "height", y="freq")
boxplot(data$wave_height)
boxplot(data, xlab="Variable Names", main=
"Boxplot of wave height data")
library(shiny); runApp('Documents/Arroyo Seco Saints/Baseball.TrackMan.Analysis.R')
library(shiny); runApp('Baseball.TrackMan.Analysis.R')
runApp('Documents/Arroyo Seco Saints/Baseball.TrackMan.Analysis.R')
library(rvest)
library(rvest)
library(rvest)
for ( i in 2:5 ) {
apage <- read_html(
paste("https://www.ncaa.com/stats/football/fbs/current/individual/469/p",
i,sep=""))
atable <- html_elements(apage, "table")
tablevalues <- html_table(atable)
write_csv(tablevalues[[1]],"rush.csv", append=TRUE)
}
library(readr)
for ( i in 2:5 ) {
apage <- read_html(
paste("https://www.ncaa.com/stats/football/fbs/current/individual/469/p",
i,sep=""))
atable <- html_elements(apage, "table")
tablevalues <- html_table(atable)
write_csv(tablevalues[[1]],"rush.csv", append=TRUE)
}
for ( i in 1:5 ) {
apage <- read_html(
paste("https://www.ncaa.com/stats/football/fbs/current/individual/469/p",
i,sep=""))
atable <- html_elements(apage, "table")
tablevalues <- html_table(atable)
write_csv(tablevalues[[1]],"rush.csv", append=TRUE)
}
library(rvest)
library(readr)
for ( i in 1:3 ) {
apage <- read_html(
paste("https://www.ncaa.com/stats/football/fbs/current/team/25/p",
i,sep=""))
atable <- html_elements(apage, "table")
tablevalues <- html_table(atable)
write_csv(tablevalues[[1]],"pass.csv", append=TRUE)
}
library(shiny); runApp('Documents/Arroyo Seco Saints/Baseball.TrackMan.Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
library(shiny); runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
library(shiny); runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
runApp('Documents/College/Semester 7/CSCE 567/Final Project/Player Analysis.R')
cat("Winning percentage by switching:", winning_percentage, "%\n")
# Set the number of simulations
n_simulations <- 1000
# Function to simulate one round of the Monty Hall problem with switching
simulate_monty_hall <- function() {
# Randomly assign the car to one of the three doors
car_door <- sample(1:3, 1)
# Contestant randomly selects a door
contestant_choice <- sample(1:3, 1)
# Host opens a door that does not contain the car and was not chosen by the contestant
possible_doors <- setdiff(1:3, c(car_door, contestant_choice))
host_opens <- sample(possible_doors, 1)
# Contestant switches to the remaining unopened door
switch_choice <- setdiff(1:3, c(contestant_choice, host_opens))
# Check if switching results in a win
return(switch_choice == car_door)
}
# Run the simulation
results <- replicate(n_simulations, simulate_monty_hall())
# Tabulate results
summary_table <- table(results)
# Convert results to a readable format
summary_table <- c("Wins by Switching" = summary_table["TRUE"],
"Losses by Switching" = summary_table["FALSE"])
# Print results
print(summary_table)
# Set the number of simulations
n_simulations <- 1000
# Function to simulate one round of the Monty Hall problem with switching
simulate_monty_hall <- function() {
# Randomly assign the car to one of the three doors
car_door <- sample(1:3, 1)
# Contestant randomly selects a door
contestant_choice <- sample(1:3, 1)
# Host opens a door that does not contain the car and was not chosen by the contestant
possible_doors <- setdiff(1:3, c(car_door, contestant_choice))
host_opens <- sample(possible_doors, 1)
# Contestant switches to the remaining unopened door
switch_choice <- setdiff(1:3, c(contestant_choice, host_opens))
# Check if switching results in a win
return(switch_choice == car_door)
}
# Run the simulation
results <- replicate(n_simulations, simulate_monty_hall())
# Tabulate results
summary_table <- table(results)
library(shiny); runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
library(shiny); runApp('Documents/Sports_Analytics.R')
runApp('Documents/Sports_Analytics.R')
setwd("~/Documents/CFB Dashboard/data")
games <- read.csv("game_data.csv")
train_data <- games[games$season <= 2023,]
test_data <- games[games$season == 2024,]
totalPoints <- games$teamPoints + games$opponentPoints
games$totalPoints <- games$teamPoints + games$opponentPoints
train_data <- games[games$season <= 2023,]
test_data <- games[games$season == 2024,]
total.lm <- lm(totalPoints ~ teamPregameRating + opponentPregameRating + opponentClassification + week + team + oppoennt, data=train_data)
total.lm <- lm(totalPoints ~ teamPregameRating + opponentPregameRating + opponentClassification + week + team + opponent, data=train_data)
summary(total.lm)
total.lm <- lm(totalPoints ~ teamPregameRating + opponentPregameRating + opponentClassification + week, data=train_data)
summary(total.lm)
total.lm <- lm(totalPoints ~ teamPregameRating + opponentPregameRating + opponentClassification + week + team + opponent, data=train_data)
test_data$predictTotal <- predict(total.lm, newdata=test_data, type="response")
test_data$predictTotal <- predict(total.lm, newdata=test_data, type="response", na.omit())
test_data$predictTotal <- predict(total.lm, newdata=test_data, type="response")
test_data$team <- factor(test_data$team, levels = levels(train_data$team))
test_data$opponent <- factor(test_data$opponent, levels = levels(train_data$opponent))
total.lm <- lm(totalPoints ~ teamPregameRating + opponentPregameRating + opponentClassification + week + team + opponent, data=train_data)
test_data$predictTotal <- predict(total.lm, newdata=test_data, type="response")
View(test_data)
library(dplyr)
library(zoo)
# Function to compute rolling average weighted by opponent rating
weighted_roll_avg <- function(x, weights) {
if (length(x) < 3) return(NA)
return(sum(x * weights) / sum(weights))
}
# Add rolling features
games_df <- games_df %>%
arrange(team, season, week) %>%
group_by(team, season) %>%
mutate(
past3_allowed = rollapplyr(
data = lag(points_allowed),
width = 3,
FUN = function(x) weighted_roll_avg(x, lag(opponent_rating)[seq_along(x)]),
fill = NA,
partial = FALSE
),
past3_mov = rollapplyr(
data = lag(MOV),
width = 3,
FUN = function(x) weighted_roll_avg(x, lag(opponent_rating)[seq_along(x)]),
fill = NA,
partial = FALSE
)
) %>%
ungroup()
games_df <- read.csv("game_data.csv")
library(dplyr)
library(zoo)
# Function to compute rolling average weighted by opponent rating
weighted_roll_avg <- function(x, weights) {
if (length(x) < 3) return(NA)
return(sum(x * weights) / sum(weights))
}
# Add rolling features
games_df <- games_df %>%
arrange(team, season, week) %>%
group_by(team, season) %>%
mutate(
past3_allowed = rollapplyr(
data = lag(points_allowed),
width = 3,
FUN = function(x) weighted_roll_avg(x, lag(opponent_rating)[seq_along(x)]),
fill = NA,
partial = FALSE
),
past3_mov = rollapplyr(
data = lag(MOV),
width = 3,
FUN = function(x) weighted_roll_avg(x, lag(opponent_rating)[seq_along(x)]),
fill = NA,
partial = FALSE
)
) %>%
ungroup()
library(dplyr)
library(zoo)
# Function to compute rolling average weighted by opponent rating
weighted_roll_avg <- function(x, weights) {
if (length(x) < 3) return(NA)
return(sum(x * weights) / sum(weights))
}
# Add rolling features
games_df <- games_df %>%
arrange(team, season, week) %>%
group_by(team, season) %>%
mutate(
past3_allowed = rollapplyr(
data = lag(opponentPoints),
width = 3,
FUN = function(x) weighted_roll_avg(x, lag(opponentPregameRating)[seq_along(x)]),
fill = NA,
partial = FALSE
),
past3_mov = rollapplyr(
data = lag(MOV),
width = 3,
FUN = function(x) weighted_roll_avg(x, lag(opponentPregameRating)[seq_along(x)]),
fill = NA,
partial = FALSE
)
) %>%
ungroup()
games_model <- games_df %>%
filter(week >= 4) %>%
drop_na(past3_allowed, past3_mov)
library(tidyr)
games_model <- games_df %>%
filter(week >= 4) %>%
drop_na(past3_allowed, past3_mov)
model <- lm(
teamPoints ~ teamPregameRating + opponentPregameRating + location + past3_mov,
data = games_model
)
model <- lm(
teamPoints ~ teamPregameRating + opponentPregameRating + past3_mov,
data = games_model
)
model <- lm(
teamPoints ~ teamPregameRating + opponentPregameRating + as.factor(location) + past3_mov,
data = games_model
)
table(games_model$location)  # See how many levels are in your data
str(games_model$location)    # Check if it's a factor or character
games_model$location <- as.factor(games_model$location)
model <- lm(
teamPoints ~ teamPregameRating + opponentPregameRating + location + past3_mov,
data = games_model
)
table(games_model$location)  # See how many levels are in your data
str(games_model$location)    # Check if it's a factor or character
View(games_model)
